.. Automatically generated by KiBot, please don't edit this file

Supported preflights
^^^^^^^^^^^^^^^^^^^^

   -  **annotate_pcb** :index:`: <pair: preflight - annotate_pcb; annotate_pcb>` [:ref:`dict <dict>`] (default: empty dict, default values used) Annotates the PCB according to physical coordinates.
      This preflight modifies the PCB and schematic, use it only in revision control environments.
      Used to assign references according to footprint coordinates.
      The project must be fully annotated first.

      -  Valid keys:

         -  ``bottom_main_ascending`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; bottom_main_ascending>` [:ref:`boolean <boolean>`] (default: ``true``) Sort the main axis in ascending order for the bottom layer.
            For X this is left to right and for Y top to bottom.
         -  ``bottom_main_axis`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; bottom_main_axis>` [:ref:`string <string>`] (default: ``'y'``) (choices: "x", "y") Use this axis as main sorting criteria for the bottom layer.
         -  ``bottom_secondary_ascending`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; bottom_secondary_ascending>` [:ref:`boolean <boolean>`] (default: ``true``) Sort the secondary axis in ascending order for the bottom layer.
            For X this is left to right and for Y top to bottom.
         -  ``bottom_start`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; bottom_start>` [:ref:`number <number>`] (default: ``101``) First number for references at the bottom layer.
            Use -1 to continue from the last top reference.
         -  ``grid`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; grid>` [:ref:`number <number>`] (default: ``1.0``) Grid size in millimeters.
         -  ``top_main_ascending`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; top_main_ascending>` [:ref:`boolean <boolean>`] (default: ``true``) Sort the main axis in ascending order for the top layer.
            For X this is left to right and for Y top to bottom.
         -  ``top_main_axis`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; top_main_axis>` [:ref:`string <string>`] (default: ``'y'``) (choices: "x", "y") Use this axis as main sorting criteria for the top layer.
         -  ``top_secondary_ascending`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; top_secondary_ascending>` [:ref:`boolean <boolean>`] (default: ``true``) Sort the secondary axis in ascending order for the top layer.
            For X this is left to right and for Y top to bottom.
         -  ``top_start`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; top_start>` [:ref:`number <number>`] (default: ``1``) First number for references at the top layer.
         -  ``use_position_of`` :index:`: <pair: preflight - annotate_pcb - annotate_pcb; use_position_of>` [:ref:`string <string>`] (default: ``'footprint'``) (choices: "footprint", "reference") Which coordinate is used.


   -  **annotate_power** :index:`: <pair: preflight - annotate_power; annotate_power>` [:ref:`boolean <boolean>`] Annotates all power components.
      This preflight modifies the schematic, use it only in revision control environments.
      Used to solve ERC problems when using filters that remove power reference numbers.

   -  **check_zone_fills** :index:`: <pair: preflight - check_zone_fills; check_zone_fills>` [:ref:`boolean <boolean>`] Zones are filled before doing any operation involving PCB layers.
      The original PCB remains unchanged. If you need to abort when the zone fill
      creates significant changes to a layer use the CheckZoneFill internal template.

   -  **draw_stackup** :index:`: <pair: preflight - draw_stackup; draw_stackup>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) Draw the PCB stackup. Needs KiCad 7 or newer.
      To specify the position and size of the drawing you can use two methods.
      You can specify it using the *pos_x*, *pos_y*, *width*, *height* and *layer* options.
      But you can also draw a rectangle in your PCB with the size and layer you want.
      Then draw another thing inside the rectangle, select both and create a group
      (right mouse button, then Grouping -> Group). Now edit the group and change its name
      to *kibot_stackup*. After running this preflight the rectangle will contain the
      stackup.

      -  Valid keys:

         -  **columns** :index:`: <pair: preflight - draw_stackup - draw_stackup; columns>` [:ref:`list(dict) <list(dict)>` | :ref:`list(string) <list(string)>`] (default: ``[]``) List of columns to display.
            Can be just the name of the column.
            Available columns are *gerber*, *drawing* and *description*.
            When empty KiBot will add them in the above order, skipping the *gerber* if not available.

            -  Valid keys:

               -  **separator** :index:`: <pair: preflight - draw_stackup - draw_stackup - columns; separator>` [:ref:`string <string>`] (default: ``' '``) Text used as separator, usually one or more spaces.
               -  **type** :index:`: <pair: preflight - draw_stackup - draw_stackup - columns; type>` [string='drawing'] [gerber,drawing,description,thickness] The gerber column contains the
                  file names for the gerber files. Is usable only when a gerber output is
                  provided.
                  The drawing column contains the drawings for each layer.
                  The description column contains the description for each layer.
                  The thickness column just displays the total stackup height.
               -  **width** :index:`: <pair: preflight - draw_stackup - draw_stackup - columns; width>` [:ref:`number <number>`] (default: ``10``) Relative width. We first compute the total width and then distribute it according
                  to the relative width of each column. The absolute width depends on the area
                  assigned for the whole drawing.
               -  ``side`` :index:`: <pair: preflight - draw_stackup - draw_stackup - columns; side>` [:ref:`string <string>`] (default: ``'auto'``) (choices: "auto", "right", "left") Side for the dimension used for the *thickness* type.
                  When using *auto* the side is detected looking for a *drawing* column.

         -  **gerber** :index:`: <pair: preflight - draw_stackup - draw_stackup; gerber>` [:ref:`string <string>`] (default: ``''``) Name of the output used to generate the gerbers. This is needed only when you
            want to include the *gerber* column, containing the gerber file names.
         -  ``border`` :index:`: <pair: preflight - draw_stackup - draw_stackup; border>` [:ref:`number <number>`] (default: ``0.1``) Line width for the border box. Use 0 to eliminate it.
         -  ``enabled`` :index:`: <pair: preflight - draw_stackup - draw_stackup; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the check. This is the replacement for the boolean value.
         -  ``group_name`` :index:`: <pair: preflight - draw_stackup - draw_stackup; group_name>` [:ref:`string <string>`] (default: ``'kibot_stackup'``) Name for the group containing the drawings. If KiBot can't find it will create
            a new group at the specified coordinates for the indicated layer.
         -  ``height`` :index:`: <pair: preflight - draw_stackup - draw_stackup; height>` [:ref:`number <number>`] (default: ``200``) Height for the drawing. The units are defined by the global *units* variable.
            Only used when the group can't be found.
         -  ``layer`` :index:`: <pair: preflight - draw_stackup - draw_stackup; layer>` [:ref:`string <string>`] (default: ``'Cmts.User'``) Layer used for the stackup. Only used when the group can't be found.
            Otherwise we use the layer for the first object in the group.
         -  ``pos_x`` :index:`: <pair: preflight - draw_stackup - draw_stackup; pos_x>` [:ref:`number <number>`] (default: ``19``) X position in the PCB. The units are defined by the global *units* variable.
            Only used when the group can't be found.
         -  ``pos_y`` :index:`: <pair: preflight - draw_stackup - draw_stackup; pos_y>` [:ref:`number <number>`] (default: ``100``) Y position in the PCB. The units are defined by the global *units* variable.
            Only used when the group can't be found.
         -  ``width`` :index:`: <pair: preflight - draw_stackup - draw_stackup; width>` [:ref:`number <number>`] (default: ``120``) Width for the drawing. The units are defined by the global *units* variable.
            Only used when the group can't be found.


   -  **drc** :index:`: <pair: preflight - drc; drc>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) Runs the DRC (Distance Rules Check) to ensure we have a valid PCB.
      You need a valid *fp-lib-table* installed. If not KiBot will try to temporarily install the template.
      This is a replacement for the *run_drc* preflight that needs KiCad 8 or newer.
      GUI exclusions and schematic parity are supported.

      -  Valid keys:

         -  **output** :index:`: <pair: preflight - drc - drc; output>` [:ref:`string <string>`] (default: ``'%f-%i%I%v.%x'``) Name for the generated archive (%i=drc %x=according to format). Affected by global options.
         -  ``all_track_errors`` :index:`: <pair: preflight - drc - drc; all_track_errors>` [:ref:`boolean <boolean>`] (default: ``false``) Report all the errors for all the tracks, not just the first.
         -  ``dir`` :index:`: <pair: preflight - drc - drc; dir>` [:ref:`string <string>`] (default: ``''``) Sub-directory for the report.
         -  ``dont_stop`` :index:`: <pair: preflight - drc - drc; dont_stop>` [:ref:`boolean <boolean>`] (default: ``false``) Continue even if we detect errors.
         -  ``enabled`` :index:`: <pair: preflight - drc - drc; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the check. This is the replacement for the boolean value.
         -  ``filters`` :index:`: <pair: preflight - drc - drc; filters>` [:ref:`list(dict) <list(dict)>`] (default: ``[]``) Used to manipulate the violations. Avoid using the *filters* preflight.

            -  Valid keys:

               -  ``change_to`` :index:`: <pair: preflight - drc - drc - filters; change_to>` [:ref:`string <string>`] (default: ``'ignore'``) (choices: "error", "warning", "ignore") The action of the filter.
                  Changing to *ignore* is the default and is used to suppress a violation, but you can also change
                  it to be an *error* or a *warning*. Note that violations excluded by KiCad are also analyzed,
                  so you can revert a GUI exclusion.
               -  ``error`` :index:`: <pair: preflight - drc - drc - filters; error>` [:ref:`string <string>`] (default: ``''``) Error id we want to exclude.
               -  ``filter`` :index:`: <pair: preflight - drc - drc - filters; filter>` [:ref:`string <string>`] (default: ``''``) Name for the filter, for documentation purposes.
               -  *filter_msg* :index:`: <pair: preflight - drc - drc - filters; filter_msg>` Alias for filter.
               -  ``regex`` :index:`: <pair: preflight - drc - drc - filters; regex>` [:ref:`string <string>`] (default: ``''``) Regular expression to match the text for the error we want to exclude.
               -  *regexp* :index:`: <pair: preflight - drc - drc - filters; regexp>` Alias for regex.

         -  ``format`` :index:`: <pair: preflight - drc - drc; format>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``'HTML'``) (choices: "RPT", "HTML", "CSV", "JSON") [:ref:`comma separated <comma_sep>`] Format/s used for the report.
            You can specify multiple formats.

         -  ``ignore_unconnected`` :index:`: <pair: preflight - drc - drc; ignore_unconnected>` [:ref:`boolean <boolean>`] (default: ``false``) Ignores the unconnected nets. Useful if you didn't finish the routing.
         -  ``schematic_parity`` :index:`: <pair: preflight - drc - drc; schematic_parity>` [:ref:`boolean <boolean>`] (default: ``true``) Check if the PCB and the schematic are coincident.
         -  ``units`` :index:`: <pair: preflight - drc - drc; units>` [:ref:`string <string>`] (default: ``'millimeters'``) (choices: "millimeters", "inches", "mils") Units used for the positions. Affected by global options.
         -  ``warnings_as_errors`` :index:`: <pair: preflight - drc - drc; warnings_as_errors>` [:ref:`boolean <boolean>`] (default: ``false``) Warnings are considered errors, they still reported as warnings.


   -  **erc** :index:`: <pair: preflight - erc; erc>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) Runs the ERC (Electrical Rules Check). To ensure the schematic is electrically correct.
      You need a valid *sym-lib-table* installed. If not KiBot will try to temporarily install the template.
      This is a replacement for the *run_erc* preflight that needs KiCad 8 or newer.

      -  Valid keys:

         -  **output** :index:`: <pair: preflight - erc - erc; output>` [:ref:`string <string>`] (default: ``'%f-%i%I%v.%x'``) Name for the generated archive (%i=erc %x=according to format). Affected by global options.
         -  ``dir`` :index:`: <pair: preflight - erc - erc; dir>` [:ref:`string <string>`] (default: ``''``) Sub-directory for the report.
         -  ``dont_stop`` :index:`: <pair: preflight - erc - erc; dont_stop>` [:ref:`boolean <boolean>`] (default: ``false``) Continue even if we detect errors.
         -  ``enabled`` :index:`: <pair: preflight - erc - erc; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the check. This is the replacement for the boolean value.
         -  ``filters`` :index:`: <pair: preflight - erc - erc; filters>` [:ref:`list(dict) <list(dict)>`] (default: ``[]``) Used to manipulate the violations. Avoid using the *filters* preflight.

            -  Valid keys:

               -  ``change_to`` :index:`: <pair: preflight - erc - erc - filters; change_to>` [:ref:`string <string>`] (default: ``'ignore'``) (choices: "error", "warning", "ignore") The action of the filter.
                  Changing to *ignore* is the default and is used to suppress a violation, but you can also change
                  it to be an *error* or a *warning*. Note that violations excluded by KiCad are also analyzed,
                  so you can revert a GUI exclusion.
               -  ``error`` :index:`: <pair: preflight - erc - erc - filters; error>` [:ref:`string <string>`] (default: ``''``) Error id we want to exclude.
               -  ``filter`` :index:`: <pair: preflight - erc - erc - filters; filter>` [:ref:`string <string>`] (default: ``''``) Name for the filter, for documentation purposes.
               -  *filter_msg* :index:`: <pair: preflight - erc - erc - filters; filter_msg>` Alias for filter.
               -  ``regex`` :index:`: <pair: preflight - erc - erc - filters; regex>` [:ref:`string <string>`] (default: ``''``) Regular expression to match the text for the error we want to exclude.
               -  *regexp* :index:`: <pair: preflight - erc - erc - filters; regexp>` Alias for regex.

         -  ``format`` :index:`: <pair: preflight - erc - erc; format>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``'HTML'``) (choices: "RPT", "HTML", "CSV", "JSON") [:ref:`comma separated <comma_sep>`] Format/s used for the report.
            You can specify multiple formats.

         -  ``units`` :index:`: <pair: preflight - erc - erc; units>` [:ref:`string <string>`] (default: ``'millimeters'``) (choices: "millimeters", "inches", "mils") Units used for the positions. Affected by global options.
         -  ``warnings_as_errors`` :index:`: <pair: preflight - erc - erc; warnings_as_errors>` [:ref:`boolean <boolean>`] (default: ``false``) Warnings are considered errors, they still reported as warnings.


   -  **erc_warnings** :index:`: <pair: preflight - erc_warnings; erc_warnings>` [:ref:`boolean <boolean>`] (default: ``false``) **Deprecated**, use the `warnings_as_errors` option from `run_erc`/`erc`.
      Option for `run_erc`. ERC warnings are considered errors.

   -  **fill_zones** :index:`: <pair: preflight - fill_zones; fill_zones>` [:ref:`boolean <boolean>`] (default: ``false``) Fill all zones again and save the PCB.

   -  **filters** :index:`: <pair: preflight - filters; filters>` [:ref:`list(dict) <list(dict)>`] (default: ``[]``) A list of entries to filter out ERC/DRC messages when using *run_erc*/*run_drc*.
      Avoid using it with the new *erc* and *drc* preflights.
      Note that ignored errors will become KiBot warnings (i.e. `(W058) ...`).
      To farther ignore these warnings use the `filters` option in the `global` section.

      -  Valid keys:

         -  ``error`` :index:`: <pair: preflight - filters - filters; error>` [:ref:`string <string>`] (default: ``''``) Error id we want to exclude.
            A name for KiCad 6 or a number for KiCad 5, but always a string.
         -  *error_number* :index:`: <pair: preflight - filters - filters; error_number>` Alias for number.
         -  ``filter`` :index:`: <pair: preflight - filters - filters; filter>` [:ref:`string <string>`] (default: ``''``) Name for the filter, for documentation purposes.
         -  *filter_msg* :index:`: <pair: preflight - filters - filters; filter_msg>` Alias for filter.
         -  ``number`` :index:`: <pair: preflight - filters - filters; number>` [:ref:`number <number>`] (default: ``0``) Error number we want to exclude.
            KiCad 5 only.
         -  ``regex`` :index:`: <pair: preflight - filters - filters; regex>` [:ref:`string <string>`] (default: ``''``) Regular expression to match the text for the error we want to exclude.
         -  *regexp* :index:`: <pair: preflight - filters - filters; regexp>` Alias for regex.


   -  **ignore_unconnected** :index:`: <pair: preflight - ignore_unconnected; ignore_unconnected>` [:ref:`boolean <boolean>`] (default: ``false``) **Deprecated**, use the `ignore_unconnected` option from `run_drc`/`drc`.
      Option for `run_drc`. Ignores the unconnected nets. Useful if you didn't finish the routing.
      It will also ignore KiCad 6 warnings when using `run_drc`.

   -  **pcb_replace** :index:`: <pair: preflight - pcb_replace; pcb_replace>` [:ref:`dict <dict>`] (default: empty dict, default values used) Replaces tags in the PCB. I.e. to insert the git hash or last revision date.
      This is useful for KiCad 5, use `set_text_variables` when using KiCad 6.
      This preflight modifies the PCB. Even when a back-up is done use it carefully.

      -  Valid keys:

         -  ``date_command`` :index:`: <pair: preflight - pcb_replace - pcb_replace; date_command>` [:ref:`string <string>`] (default: ``''``) Command to get the date to use in the PCB.\\
            ```git log -1 --format='%as' -- "$KIBOT_PCB_NAME"```\\
            Will return the date in YYYY-MM-DD format.\\
            ```date -d @`git log -1 --format='%at' -- "$KIBOT_PCB_NAME"` +%Y-%m-%d_%H-%M-%S```\\
            Will return the date in YYYY-MM-DD_HH-MM-SS format.\\
            Important: on KiCad 6 the title block data is optional.
            This command will work only if you have a date in the PCB/Schematic.
         -  ``replace_tags`` :index:`: <pair: preflight - pcb_replace - pcb_replace; replace_tags>` [:ref:`dict <dict>` | :ref:`list(dict) <list(dict)>`] (default: ``[]``) Tag or tags to replace.

            -  Valid keys:

               -  ``after`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; after>` [:ref:`string <string>`] (default: ``''``) Text to add after the output of `command`.
               -  ``before`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; before>` [:ref:`string <string>`] (default: ``''``) Text to add before the output of `command`.
               -  ``command`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; command>` [:ref:`string <string>`] (default: ``''``) Command to execute to get the text, will be used only if `text` is empty.
                  KIBOT_PCB_NAME variable is the name of the current PCB.
               -  ``tag`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; tag>` [:ref:`string <string>`] (default: ``''``) Name of the tag to replace. Use `version` for a tag named `@version@`.
               -  ``tag_delimiter`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; tag_delimiter>` [:ref:`string <string>`] (default: ``'@'``) Character used to indicate the beginning and the end of a tag.
                  Don't change it unless you really know about KiCad's file formats.
               -  ``text`` :index:`: <pair: preflight - pcb_replace - pcb_replace - replace_tags; text>` [:ref:`string <string>`] (default: ``''``) Text to insert instead of the tag.



   -  **run_drc** :index:`: <pair: preflight - run_drc; run_drc>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) (Deprecated for KiCad 8, use *drc*) Runs the DRC (Distance Rules Check)
      to ensure we have a valid PCB.
      The report file name is controlled by the global output pattern (%i=drc %x=txt).
      Note that the KiCad 6+ *Test for parity between PCB and schematic* option is not supported.
      If you need to check the parity use the `update_xml` preflight.
      KiCad 6 introduced `warnings` they are currently counted be the `unconnected` counter of KiBot.
      This will change in the future.
      If you use DRC exclusions please consult the `drc_exclusions_workaround` global option.

      -  Valid keys:

         -  ``dir`` :index:`: <pair: preflight - run_drc - run_drc; dir>` [:ref:`string <string>`] (default: ``''``) Sub-directory for the report.
         -  ``enabled`` :index:`: <pair: preflight - run_drc - run_drc; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the DRC. This is the replacement for the boolean value.
         -  ``ignore_unconnected`` :index:`: <pair: preflight - run_drc - run_drc; ignore_unconnected>` [:ref:`boolean <boolean>`] (default: ``false``) Ignores the unconnected nets. Useful if you didn't finish the routing.
            It will also ignore KiCad 6 warnings.


   -  **run_erc** :index:`: <pair: preflight - run_erc; run_erc>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) (Deprecated for KiCad 8, use *erc*) Runs the ERC (Electrical Rules Check).
      To ensure the schematic is electrically correct.
      The report file name is controlled by the global output pattern (%i=erc %x=txt).

      -  Valid keys:

         -  ``dir`` :index:`: <pair: preflight - run_erc - run_erc; dir>` [:ref:`string <string>`] (default: ``''``) Sub-directory for the report.
         -  ``enabled`` :index:`: <pair: preflight - run_erc - run_erc; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the ERC. This is the replacement for the boolean value.
         -  ``warnings_as_errors`` :index:`: <pair: preflight - run_erc - run_erc; warnings_as_errors>` [:ref:`boolean <boolean>`] (default: ``false``) ERC warnings are considered errors.


   -  **sch_replace** :index:`: <pair: preflight - sch_replace; sch_replace>` [:ref:`dict <dict>`] (default: empty dict, default values used) Replaces tags in the schematic. I.e. to insert the git hash or last revision date.
      This is useful for KiCad 5, use `set_text_variables` when using KiCad 6.
      This preflight modifies the schematics. Even when a back-up is done use it carefully.

      -  Valid keys:

         -  ``date_command`` :index:`: <pair: preflight - sch_replace - sch_replace; date_command>` [:ref:`string <string>`] (default: ``''``) Command to get the date to use in the SCH.\\
            ```git log -1 --format='%as' -- "$KIBOT_SCH_NAME"```\\
            Will return the date in YYYY-MM-DD format.\\
            ```date -d @`git log -1 --format='%at' -- "$KIBOT_SCH_NAME"` +%Y-%m-%d_%H-%M-%S```\\
            Will return the date in YYYY-MM-DD_HH-MM-SS format.\\
            Important: on KiCad 6 the title block data is optional.
            This command will work only if you have a date in the SCH/Schematic.
         -  ``replace_tags`` :index:`: <pair: preflight - sch_replace - sch_replace; replace_tags>` [:ref:`dict <dict>` | :ref:`list(dict) <list(dict)>`] (default: ``[]``) Tag or tags to replace.

            -  Valid keys:

               -  ``after`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; after>` [:ref:`string <string>`] (default: ``''``) Text to add after the output of `command`.
               -  ``before`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; before>` [:ref:`string <string>`] (default: ``''``) Text to add before the output of `command`.
               -  ``command`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; command>` [:ref:`string <string>`] (default: ``''``) Command to execute to get the text, will be used only if `text` is empty.
                  KIBOT_SCH_NAME variable is the name of the current sheet.
                  KIBOT_TOP_SCH_NAME variable is the name of the top sheet.
               -  ``tag`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; tag>` [:ref:`string <string>`] (default: ``''``) Name of the tag to replace. Use `version` for a tag named `@version@`.
               -  ``tag_delimiter`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; tag_delimiter>` [:ref:`string <string>`] (default: ``'@'``) Character used to indicate the beginning and the end of a tag.
                  Don't change it unless you really know about KiCad's file formats.
               -  ``text`` :index:`: <pair: preflight - sch_replace - sch_replace - replace_tags; text>` [:ref:`string <string>`] (default: ``''``) Text to insert instead of the tag.



   -  **set_text_variables** :index:`: <pair: preflight - set_text_variables; set_text_variables>` [:ref:`dict <dict>` | :ref:`list(dict) <list(dict)>`] (default: ``[]``) Defines KiCad 6+ variables.
      They are expanded using `${VARIABLE}`, and stored in the project file.
      This preflight replaces `pcb_replace` and `sch_replace` when using KiCad 6.
      The KiCad project file is modified.
      Warning: don't use `-s all` or this preflight will be skipped.

      -  Valid keys:

         -  ``after`` :index:`: <pair: preflight - set_text_variables - set_text_variables; after>` [:ref:`string <string>`] (default: ``''``) Text to add after the output of `command`.
         -  ``before`` :index:`: <pair: preflight - set_text_variables - set_text_variables; before>` [:ref:`string <string>`] (default: ``''``) Text to add before the output of `command`.
         -  ``command`` :index:`: <pair: preflight - set_text_variables - set_text_variables; command>` [:ref:`string <string>`] (default: ``''``) Command to execute to get the text, will be used only if `text` is empty.
            This command will be executed using the Bash shell.
            Be careful about spaces in file names (i.e. use "$KIBOT_PCB_NAME").
            The `KIBOT_PCB_NAME` environment variable is the PCB file and the
            `KIBOT_SCH_NAME` environment variable is the schematic file.
         -  ``expand_kibot_patterns`` :index:`: <pair: preflight - set_text_variables - set_text_variables; expand_kibot_patterns>` [:ref:`boolean <boolean>`] (default: ``true``) Expand %X patterns. The context is `schematic`.
         -  ``name`` :index:`: <pair: preflight - set_text_variables - set_text_variables; name>` [:ref:`string <string>`] (default: ``''``) Name of the variable. The `version` variable will be expanded using `${version}`.
         -  ``text`` :index:`: <pair: preflight - set_text_variables - set_text_variables; text>` [:ref:`string <string>`] (default: ``''``) Text to insert instead of the variable.
         -  *variable* :index:`: <pair: preflight - set_text_variables - set_text_variables; variable>` Alias for name.


   -  **update_footprint** :index:`: <pair: preflight - update_footprint; update_footprint>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``''``) [:ref:`comma separated <comma_sep>`] Updates footprints from the libs, you must provide one or more
      references to be updated. This is useful to replace logos using freshly created versions.


   -  **update_pcb_characteristics** :index:`: <pair: preflight - update_pcb_characteristics; update_pcb_characteristics>` [:ref:`boolean <boolean>`] (default: ``false``) Update the information in the Board Characteristics.
      Starting with KiCad 7 you can paste a block containing board information using
      *Place* -> *Add Board Characteristics*. But this information is static, so if
      you modify anything related to it the block will be obsolete.
      This preflight tries to refresh the information.

   -  **update_qr** :index:`: <pair: preflight - update_qr; update_qr>` [:ref:`boolean <boolean>`] Update the QR codes.
      Complements the `qr_lib` output.
      The KiCad 6 files and the KiCad 5 PCB needs manual update, generating a new library isn't enough.

   -  **update_stackup** :index:`: <pair: preflight - update_stackup; update_stackup>` [:ref:`boolean <boolean>`] Update the information in the Stackup Table.
      Starting with KiCad 7 you can paste a block containing board information using
      *Place* -> *Stackup Table*. But this information is static, so if
      you modify anything related to it the block will be obsolete.
      This preflight tries to refresh the information.

   -  **update_xml** :index:`: <pair: preflight - update_xml; update_xml>` [:ref:`boolean <boolean>` | :ref:`dict <dict>`] (default: ``false``) Update the XML version of the BoM (Bill of Materials).
      To ensure our generated BoM is up to date.
      Note that this isn't needed when using the internal BoM generator (`bom`).
      You can compare the PCB and schematic netlists using it.

      -  Valid keys:

         -  **check_pcb_parity** :index:`: <pair: preflight - update_xml - update_xml; check_pcb_parity>` [:ref:`boolean <boolean>`] (default: ``false``) Check if the PCB and Schematic are synchronized.
            This is equivalent to the *Test for parity between PCB and schematic* of the DRC dialog.
            Only for KiCad 6 and 7. **Important**: when using KiCad 6 and the *Exclude from BoM* attribute
            these components won't be included in the generated XML, so we can't check its parity.
         -  ``as_warnings`` :index:`: <pair: preflight - update_xml - update_xml; as_warnings>` [:ref:`boolean <boolean>`] (default: ``false``) Inform the problems as warnings and don't stop.
         -  ``enabled`` :index:`: <pair: preflight - update_xml - update_xml; enabled>` [:ref:`boolean <boolean>`] (default: ``true``) Enable the update. This is the replacement for the boolean value.


